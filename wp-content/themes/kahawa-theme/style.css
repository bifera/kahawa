/* 
Theme Name: Kahawa Theme
Version: 0.1
Description: Child theme for Storefront. 
Author: Justaniewska
Author URI: http://github.com/justaniewska 
Template: storefront 
*/
/*******************************************************************************
========= required SASS files ----- do not remove ==============================
********************************************************************************
********************************************************************************/
/** setup files **/
/**** project variables ****/
/*** modular scale ***/
/*** susy ***/
/*** typography ***/
/*** colors ***/
/*** layout ***/
/**** project mixins ****/
/**** extend silent classes ****/
/* line 18, scss/modules/_mixins.scss */
.kahawa-row::after {
  display: block;
  clear: both;
  content: ""; }

/* line 25, scss/modules/_mixins.scss */
.col-full, .col-half, .col-third, .col-three-quart {
  padding: 0 0.61803rem; }

/* line 29, scss/modules/_mixins.scss */
.col-full, .col-half, .col-third, .col-three-quart {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

/**** normalize styles ****/
/* line 3, scss/modules/_normalize.scss */
* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

/* line 7, scss/modules/_normalize.scss */
html, body {
  font-family: "Lato", sans-serif;
  color: #232323; }

/* line 13, scss/modules/_normalize.scss */
h1 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 4.5rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 13, scss/modules/_normalize.scss */
h2 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 2.25rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 13, scss/modules/_normalize.scss */
h3 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 13, scss/modules/_normalize.scss */
h4 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 1.125rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 13, scss/modules/_normalize.scss */
h5 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 0.9rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 13, scss/modules/_normalize.scss */
h6 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 0.75rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 21, scss/modules/_normalize.scss */
h1, h2, h3 {
  font-weight: 700; }
  /* line 23, scss/modules/_normalize.scss */
  h1 > a, h2 > a, h3 > a {
    font-weight: 700; }

/* line 28, scss/modules/_normalize.scss */
p {
  margin-bottom: 1rem;
  color: #232323; }

/* line 33, scss/modules/_normalize.scss */
a {
  color: #CD853F; }
  /* line 35, scss/modules/_normalize.scss */
  a:hover {
    color: #232323; }

/* line 40, scss/modules/_normalize.scss */
textarea {
  resize: none; }

/* line 44, scss/modules/_normalize.scss */
.button, button, button.menu-toggle, button.alt, .button.alt, .button, input[type="submit"].button {
  font-weight: 700;
  line-height: 1;
  padding: 1rem 2.61803rem;
  border-radius: 5px;
  border: 2px solid #232323;
  background-color: transparent;
  color: #232323; }
  /* line 52, scss/modules/_normalize.scss */
  .button:hover, button:hover, button.menu-toggle:hover, button.alt:hover, .button.alt:hover, .button:hover, input[type="submit"].button:hover {
    background-color: transparent;
    border-color: #CD853F;
    color: #CD853F; }
  /* line 57, scss/modules/_normalize.scss */
  .button-open, button-open, button.menu-toggle-open, button.alt-open, .button.alt-open, .button-open, input[type="submit"].button-open {
    background-color: rgba(53, 39, 26, 0.45);
    border: 2px solid #fff;
    color: #fff; }
    /* line 61, scss/modules/_normalize.scss */
    .button-open:hover, button-open:hover, button.menu-toggle-open:hover, button.alt-open:hover, .button.alt-open:hover, .button-open:hover, input[type="submit"].button-open:hover {
      background-color: rgba(223, 211, 173, 0.8);
      color: #000;
      border-color: #dfd3ad; }

/* line 69, scss/modules/_normalize.scss */
.kahawa-row {
  margin-left: -0.61803rem;
  margin-right: -0.61803rem; }

/* line 75, scss/modules/_normalize.scss */
.col-full {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto; }

/* line 83, scss/modules/_normalize.scss */
.col-half {
  width: 100%; }
  @media (min-width: 768px) {
    /* line 83, scss/modules/_normalize.scss */
    .col-half {
      width: 50%;
      float: left; } }

/* line 93, scss/modules/_normalize.scss */
.col-third {
  width: 100%; }
  @media (min-width: 768px) {
    /* line 93, scss/modules/_normalize.scss */
    .col-third {
      width: 33.3333%;
      float: left; } }

/* line 103, scss/modules/_normalize.scss */
.col-three-quart {
  width: 100%; }
  @media (min-width: 768px) {
    /* line 103, scss/modules/_normalize.scss */
    .col-three-quart {
      width: 66.6666%;
      float: left; } }

/**** project functions ****/
/** styles **/
/**** styles for header ****/
/* line 3, scss/partials/_header.scss */
.site-header {
  width: 100%;
  background-color: #dfd3ad;
  padding: 0;
  position: fixed;
  top: 0;
  left: 0;
  margin-bottom: 0 !important;
  border: none;
  z-index: 9999; }

/* line 14, scss/partials/_header.scss */
.site-header {
  background-color: rgba(233, 225, 199, 0.85); }

/* line 19, scss/partials/_header.scss */
.admin-bar .site-header {
  padding-top: 32px; }

/* line 24, scss/partials/_header.scss */
.kahawa-hero {
  width: 100%;
  height: 250px;
  background-position: center bottom;
  background-repeat: no-repeat;
  background-size: cover;
  position: relative; }
  @media (min-width: 768px) {
    /* line 24, scss/partials/_header.scss */
    .kahawa-hero {
      height: 380px; } }
  /* line 34, scss/partials/_header.scss */
  .kahawa-hero::after {
    width: 100%;
    height: 100%;
    display: block;
    content: "";
    background-color: rgba(131, 131, 131, 0.15);
    position: absolute;
    top: 0;
    left: 0; }
  /* line 44, scss/partials/_header.scss */
  .kahawa-hero .overlay {
    width: 100%;
    height: 100%;
    background-repeat: repeat;
    opacity: .25; }
  /* line 50, scss/partials/_header.scss */
  .kahawa-hero .subpage-title {
    position: absolute;
    bottom: 25px;
    color: #fff;
    line-height: 1; }
    @media (min-width: 768px) {
      /* line 50, scss/partials/_header.scss */
      .kahawa-hero .subpage-title {
        bottom: 60px; } }

/* line 62, scss/partials/_header.scss */
.kahawa-header-content {
  position: relative;
  min-height: 70px; }
  @media (min-width: 768px) {
    /* line 62, scss/partials/_header.scss */
    .kahawa-header-content {
      min-height: 130px; } }
  /* line 68, scss/partials/_header.scss */
  .kahawa-header-content .site-branding {
    float: left;
    margin: 0;
    padding: 0;
    z-index: 999; }
    @media (min-width: 768px) {
      /* line 68, scss/partials/_header.scss */
      .kahawa-header-content .site-branding {
        float: none;
        position: absolute;
        left: 0;
        bottom: 25px;
        margin: 0; } }
    /* line 80, scss/partials/_header.scss */
    .kahawa-header-content .site-branding img {
      max-width: 130px;
      height: auto;
      margin: 0 auto; }
      @media (min-width: 768px) {
        /* line 80, scss/partials/_header.scss */
        .kahawa-header-content .site-branding img {
          max-width: 180px;
          margin: 0; } }
  /* line 90, scss/partials/_header.scss */
  .kahawa-header-content .storefront-primary-navigation {
    text-align: center;
    margin-top: 20px; }
    @media (min-width: 768px) {
      /* line 90, scss/partials/_header.scss */
      .kahawa-header-content .storefront-primary-navigation {
        text-align: left;
        position: absolute;
        bottom: 25px;
        right: 0;
        width: 100%;
        padding: 0 0 0 230px;
        margin: 0; }
        /* line 102, scss/partials/_header.scss */
        .kahawa-header-content .storefront-primary-navigation .menu .menu-item {
          line-height: 1; }
        /* line 106, scss/partials/_header.scss */
        .kahawa-header-content .storefront-primary-navigation .menu .current-menu-item a {
          color: #df852d; } }
    /* line 112, scss/partials/_header.scss */
    .kahawa-header-content .storefront-primary-navigation .main-navigation {
      float: none; }
      @media (min-width: 768px) {
        /* line 112, scss/partials/_header.scss */
        .kahawa-header-content .storefront-primary-navigation .main-navigation {
          width: 100%;
          margin: 0; } }

/* line 123, scss/partials/_header.scss */
.main-navigation .menu-toggle {
  float: right;
  background-color: #dfd3ad; }
  /* line 126, scss/partials/_header.scss */
  .main-navigation .menu-toggle:hover, .main-navigation .menu-toggle:active {
    background-color: #dfd3ad; }

/* line 131, scss/partials/_header.scss */
.main-navigation.toggled .handheld-navigation {
  max-height: inherit;
  background-color: rgba(223, 211, 173, 0.8); }
  /* line 134, scss/partials/_header.scss */
  .main-navigation.toggled .handheld-navigation > ul {
    float: none;
    text-align: center; }
    /* line 138, scss/partials/_header.scss */
    .main-navigation.toggled .handheld-navigation > ul .current-menu-item a {
      color: #df852d; }

/* line 145, scss/partials/_header.scss */
.main-navigation .menu {
  float: right; }
  /* line 147, scss/partials/_header.scss */
  .main-navigation .menu a {
    color: #232323;
    font-size: 1rem;
    font-weight: 700;
    padding: 1rem 1.61803rem; }
    /* line 152, scss/partials/_header.scss */
    .main-navigation .menu a:hover {
      color: #df852d; }

/* line 161, scss/partials/_header.scss */
header .kahawa-header-cart {
  display: none; }

@media (min-width: 768px) {
  /* line 165, scss/partials/_header.scss */
  header .main-navigation {
    padding-right: 165px;
    position: absolute;
    left: 0;
    bottom: 0; } }

@media (min-width: 768px) and (min-width: 768px) {
  /* line 171, scss/partials/_header.scss */
  header .kahawa-header-cart {
    display: block;
    position: absolute;
    right: 0;
    bottom: 0;
    margin: 0; }
    /* line 179, scss/partials/_header.scss */
    header .kahawa-header-cart .kahawa-cart-link a {
      position: relative; }
    /* line 182, scss/partials/_header.scss */
    header .kahawa-header-cart .kahawa-cart-link span {
      font-size: .875rem;
      line-height: 16px; }
      /* line 185, scss/partials/_header.scss */
      header .kahawa-header-cart .kahawa-cart-link span::before {
        display: inline;
        content: "("; }
      /* line 189, scss/partials/_header.scss */
      header .kahawa-header-cart .kahawa-cart-link span::after {
        display: inline;
        content: ")"; }
    /* line 195, scss/partials/_header.scss */
    header .kahawa-header-cart > li {
      display: inline-block;
      list-style-type: none; }
      /* line 198, scss/partials/_header.scss */
      header .kahawa-header-cart > li a {
        padding: 1.61803rem 1rem;
        line-height: 1;
        display: block; }
        /* line 202, scss/partials/_header.scss */
        header .kahawa-header-cart > li a:hover {
          color: #CD853F; } }

/**** styles for footer ****/
/* line 3, scss/partials/_footer.scss */
.site-footer {
  background-color: #dfd3ad;
  padding-bottom: 70px; }
  /* line 6, scss/partials/_footer.scss */
  .site-footer .map-widget {
    height: 350px; }
  /* line 10, scss/partials/_footer.scss */
  .site-footer .kahawa-footer-widget h5 {
    font-weight: 700; }
  /* line 14, scss/partials/_footer.scss */
  .site-footer .kahawa-footer-widget a:hover {
    color: #CD853F; }
  /* line 18, scss/partials/_footer.scss */
  .site-footer .kahawa-footer-widget .fa {
    font-size: 1.61803rem;
    margin-right: 1rem; }

/**** styles for general page content ****/
/* line 4, scss/partials/_content.scss */
.page-template-template-subpage .content-area, .page-template-template-main .content-area {
  float: none;
  width: 100%;
  padding: 0;
  margin: 0; }

/* line 12, scss/partials/_content.scss */
.homepage-content {
  width: 100%; }
  /* line 14, scss/partials/_content.scss */
  .homepage-content .kahawa-hero {
    width: 100%;
    height: 100vh;
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
    position: relative; }
    /* line 21, scss/partials/_content.scss */
    .homepage-content .kahawa-hero::after {
      width: 100%;
      height: 100%;
      display: block;
      content: "";
      background-color: rgba(131, 131, 131, 0.15);
      position: absolute;
      top: 0;
      left: 0; }
    /* line 31, scss/partials/_content.scss */
    .homepage-content .kahawa-hero .overlay {
      width: 100%;
      height: 100%;
      background-repeat: repeat;
      opacity: .55; }
  /* line 38, scss/partials/_content.scss */
  .homepage-content .kahawa-content {
    padding-top: 4rem; }

/* line 43, scss/partials/_content.scss */
.kahawa-intro {
  text-align: center;
  width: 100%;
  padding-top: 130px;
  padding-bottom: 70px;
  z-index: 1;
  position: absolute;
  top: 0;
  left: 0; }
  @media (min-width: 768px) {
    /* line 43, scss/partials/_content.scss */
    .kahawa-intro {
      padding-bottom: 0;
      position: absolute;
      top: 50%;
      left: 50%;
      -webkit-transform: translateX(-50%) translateY(-50%);
              transform: translateX(-50%) translateY(-50%); } }
  /* line 59, scss/partials/_content.scss */
  .kahawa-intro .site-title, .kahawa-intro .site-subtitle {
    color: #fff;
    line-height: 1; }
  /* line 63, scss/partials/_content.scss */
  .kahawa-intro .kahawa-title {
    margin-bottom: 20px; }
    /* line 65, scss/partials/_content.scss */
    .kahawa-intro .kahawa-title img {
      max-width: 580px;
      margin: auto; }
  /* line 70, scss/partials/_content.scss */
  .kahawa-intro .kahawa-subtitle {
    text-transform: uppercase;
    font-size: 1.61803rem;
    color: #fff;
    max-width: 46.97872rem;
    margin: 0 auto 2.61803rem auto; }

/* line 80, scss/partials/_content.scss */
body:not(.home) .site-main {
  position: relative; }
  /* line 82, scss/partials/_content.scss */
  body:not(.home) .site-main .woocommerce-products-header, body:not(.home) .site-main .entry-header {
    position: absolute;
    top: -100px; }
    /* line 85, scss/partials/_content.scss */
    body:not(.home) .site-main .woocommerce-products-header .page-title, body:not(.home) .site-main .woocommerce-products-header .subpage-title, body:not(.home) .site-main .woocommerce-products-header .entry-title, body:not(.home) .site-main .entry-header .page-title, body:not(.home) .site-main .entry-header .subpage-title, body:not(.home) .site-main .entry-header .entry-title {
      color: #fff; }
    /* line 88, scss/partials/_content.scss */
    body:not(.home) .site-main .woocommerce-products-header + .entry-content, body:not(.home) .site-main .entry-header + .entry-content {
      padding-top: 80px; }

/* line 93, scss/partials/_content.scss */
body:not(.home) .widget-area {
  padding-top: 80px; }

/* line 98, scss/partials/_content.scss */
.post-type-archive-product .site-main, .post-type-archive-product .widget-area, .single-product .site-main, .single-product .widget-area {
  padding-top: 80px; }

/**** styles for single product ****/
/* line 3, scss/partials/_product.scss */
.quantity input.qty {
  padding: 1rem;
  line-height: 1; }

/* line 10, scss/partials/_product.scss */
.coupon input.input-text {
  padding: 1rem;
  line-height: 1; }

/* line 18, scss/partials/_product.scss */
.single-product .product .product_meta {
  display: none; }

/* line 22, scss/partials/_product.scss */
.single-product .product .summary .product_title {
  font-size: 3rem; }

/* line 25, scss/partials/_product.scss */
.single-product .product .summary .price {
  font-size: 1rem;
  margin: 1rem 0 1.25rem 0; }

/* line 31, scss/partials/_product.scss */
.single-product .product .variations_form .price {
  font-size: 1.25rem;
  color: #232323;
  font-weight: 700; }

/* line 36, scss/partials/_product.scss */
.single-product .product .variations_form label {
  font-size: 1.125rem;
  font-weight: 300; }

/* line 41, scss/partials/_product.scss */
.single-product .product .variations_form .value select {
  width: 175px; }

/* line 52, scss/partials/_product.scss */
.woocommerce-tabs ul.wc-tabs li a {
  font-size: 1.125rem;
  font-weight: 300; }

/* line 63, scss/partials/_product.scss */
.related.products .products .product .woocommerce-loop-product__title {
  font-weight: 700; }

/* line 2, scss/partials/_wydarzenie.scss */
.page-template-wydarzenie-archive .content-area, .single-wydarzenie .content-area {
  float: none;
  width: 100%;
  padding: 0;
  margin: 0; }

/* line 10, scss/partials/_wydarzenie.scss */
.wydarzenie-tab {
  width: 100%;
  height: 100%;
  padding: 1.61803rem;
  background-color: #fff; }
  /* line 15, scss/partials/_wydarzenie.scss */
  .wydarzenie-tab .wydarzenie-title {
    padding: 1rem 0;
    font-size: 1.61803rem;
    text-align: center;
    margin: 0; }
    /* line 20, scss/partials/_wydarzenie.scss */
    .wydarzenie-tab .wydarzenie-title::after {
      display: block;
      content: "";
      width: 50%;
      height: 1px;
      background-color: #838383;
      margin: 1rem auto 0; }
  /* line 29, scss/partials/_wydarzenie.scss */
  .wydarzenie-tab .wydarzenie-details {
    margin-bottom: 1.61803rem;
    border-bottom: 1px solid #838383; }
    /* line 32, scss/partials/_wydarzenie.scss */
    .wydarzenie-tab .wydarzenie-details .wydarzenie-date {
      font-size: 1.125rem;
      font-weight: 300;
      margin-bottom: 1rem; }
    /* line 37, scss/partials/_wydarzenie.scss */
    .wydarzenie-tab .wydarzenie-details .wydarzenie-short-description {
      color: #838383; }
    /* line 40, scss/partials/_wydarzenie.scss */
    .wydarzenie-tab .wydarzenie-details p {
      font-size: .875rem;
      color: #232323; }
  /* line 45, scss/partials/_wydarzenie.scss */
  .wydarzenie-tab .wydarzenie-accent {
    font-weight: 700; }
  /* line 48, scss/partials/_wydarzenie.scss */
  .wydarzenie-tab .wydarzenie-link {
    text-align: right; }
    /* line 50, scss/partials/_wydarzenie.scss */
    .wydarzenie-tab .wydarzenie-link a {
      font-weight: 700; }
      /* line 52, scss/partials/_wydarzenie.scss */
      .wydarzenie-tab .wydarzenie-link a::after {
        display: inline-block;
        content: "";
        width: 5px;
        height: 5px;
        border-top: 1px solid #CD853F;
        border-right: 1px solid #CD853F;
        -webkit-transform: rotate(45deg);
                transform: rotate(45deg);
        margin-left: 5px; }

/* line 67, scss/partials/_wydarzenie.scss */
.single-wydarzenie .entry-details {
  margin-bottom: 2.61803rem; }

/* line 70, scss/partials/_wydarzenie.scss */
.single-wydarzenie .wydarzenie-date {
  font-family: "Open Sans Condensed", sans-serif;
  font-weight: 700;
  font-size: 1.75rem;
  margin-top: 1.61803rem;
  margin-bottom: 2.61803rem; }

/* line 77, scss/partials/_wydarzenie.scss */
.single-wydarzenie .wydarzenie-short-description {
  font-size: 1.25rem;
  font-weight: 300; }

/* line 81, scss/partials/_wydarzenie.scss */
.single-wydarzenie .entry-footer {
  margin-top: 2.61803rem;
  margin-bottom: 2.61803rem; }

/* line 85, scss/partials/_wydarzenie.scss */
.single-wydarzenie .back-link {
  font-weight: 700; }

/* styles for checkout pages */
/* line 5, scss/partials/_checkout.scss */
.checkout .woocommerce-billing-fields label, .checkout .woocommerce-additional-fields label {
  font-weight: 600;
  color: #6d6d6d; }

/* line 9, scss/partials/_checkout.scss */
.checkout .woocommerce-billing-fields input, .checkout .woocommerce-additional-fields input {
  background-color: #f8f8f8; }

/* line 12, scss/partials/_checkout.scss */
.checkout .woocommerce-billing-fields .required, .checkout .woocommerce-additional-fields .required {
  text-decoration: none; }

@media (min-width: 768px) {
  /* line 16, scss/partials/_checkout.scss */
  .checkout #order_review_heading {
    padding: 0;
    margin-bottom: 1rem; } }

/* line 23, scss/partials/_checkout.scss */
.checkout #order_review .shop_table {
  margin-bottom: 2.61803rem; }
  /* line 25, scss/partials/_checkout.scss */
  .checkout #order_review .shop_table th.product-name, .checkout #order_review .shop_table td.product-name {
    width: 175px; }
  /* line 28, scss/partials/_checkout.scss */
  .checkout #order_review .shop_table td.product-name {
    color: #232323; }
  /* line 32, scss/partials/_checkout.scss */
  .checkout #order_review .shop_table .variation dt {
    color: #6d6d6d; }
  /* line 35, scss/partials/_checkout.scss */
  .checkout #order_review .shop_table .variation dd {
    font-style: italic; }
  /* line 40, scss/partials/_checkout.scss */
  .checkout #order_review .shop_table tfoot::before {
    display: block;
    width: 100%;
    content: "";
    height: 2.61803rem; }
  /* line 47, scss/partials/_checkout.scss */
  .checkout #order_review .shop_table .woocommerce-Price-amount {
    color: #232323; }

/* line 56, scss/partials/_checkout.scss */
.woocommerce-order-received ul.woocommerce-order-overview.order_details::before {
  display: none; }

/* line 59, scss/partials/_checkout.scss */
.woocommerce-order-received ul.woocommerce-order-overview.order_details li {
  font-size: 1rem;
  color: #6d6d6d;
  text-transform: none;
  font-weight: 700;
  position: relative; }
  /* line 65, scss/partials/_checkout.scss */
  .woocommerce-order-received ul.woocommerce-order-overview.order_details li strong {
    font-size: 1.125rem;
    font-weight: 700;
    color: #232323; }

/* line 73, scss/partials/_checkout.scss */
.woocommerce-order-received .woocommerce-table--order-details .woocommerce-Price-amount {
  color: #232323;
  font-weight: 700; }

/* line 78, scss/partials/_checkout.scss */
.woocommerce-order-received .woocommerce-table--order-details tfoot td {
  color: #232323; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
