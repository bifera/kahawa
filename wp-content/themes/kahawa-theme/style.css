/* 
Theme Name: Kahawa Theme
Version: 0.1
Description: Child theme for Storefront. 
Author: Justaniewska
Author URI: http://github.com/justaniewska 
Template: storefront 
*/
/*******************************************************************************
========= required SASS files ----- do not remove ==============================
********************************************************************************
********************************************************************************/
/** setup files **/
/**** project variables ****/
/*** modular scale ***/
/*** susy ***/
/*** typography ***/
/*** colors ***/
/*** layout ***/
/**** normalize styles ****/
/* line 3, scss/modules/_normalize.scss */
* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

/* line 7, scss/modules/_normalize.scss */
html, body {
  font-family: "Lato", sans-serif; }

/* line 12, scss/modules/_normalize.scss */
h1 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 6rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 12, scss/modules/_normalize.scss */
h2 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 3rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 12, scss/modules/_normalize.scss */
h3 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 2rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 12, scss/modules/_normalize.scss */
h4 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 12, scss/modules/_normalize.scss */
h5 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 1.2rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 12, scss/modules/_normalize.scss */
h6 {
  font-family: "Open Sans Condensed", sans-serif;
  font-size: 1rem;
  margin-bottom: 1rem;
  color: #232323; }

/* line 20, scss/modules/_normalize.scss */
h1, h2, h3 {
  font-weight: 700; }

/* line 24, scss/modules/_normalize.scss */
p {
  margin-bottom: 1rem;
  color: #232323; }

/* line 29, scss/modules/_normalize.scss */
.col-full {
  width: 1200px;
  max-width: 1200px; }

/* line 36, scss/modules/_normalize.scss */
.col-half {
  width: 50%;
  float: left; }

/* line 42, scss/modules/_normalize.scss */
.kahawa-row {
  margin-left: -0.61803rem;
  margin-right: -0.61803rem; }

/* line 48, scss/modules/_normalize.scss */
.button {
  text-transform: uppercase;
  font-family: "Open Sans Condensed", sans-serif;
  font-weight: 700; }
  /* line 52, scss/modules/_normalize.scss */
  .button-open {
    background-color: rgba(53, 39, 26, 0.45);
    border: 2px solid #fff;
    color: #fff;
    border-radius: 5px; }
    /* line 57, scss/modules/_normalize.scss */
    .button-open:hover {
      background-color: rgba(223, 211, 173, 0.8);
      color: #000;
      border-color: #dfd3ad; }

/**** project mixins ****/
/**** extend silent classes ****/
/* line 18, scss/modules/_mixins.scss */
.kahawa-row::after {
  display: block;
  clear: both;
  content: ""; }

/* line 25, scss/modules/_mixins.scss */
.col-full, .col-half {
  padding: 0 0.61803rem; }

/* line 29, scss/modules/_mixins.scss */
.col-full {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

/**** project functions ****/
/** styles **/
/**** styles for header ****/
/* line 3, scss/partials/_header.scss */
.page-template-template-main, .page-template-template-subpage, .page-template-wydarzenie-archive, .page-template-default, .product-template-default, .archive {
  position: relative; }
  /* line 5, scss/partials/_header.scss */
  .page-template-template-main .site-header, .page-template-template-subpage .site-header, .page-template-wydarzenie-archive .site-header, .page-template-default .site-header, .product-template-default .site-header, .archive .site-header {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    background-color: transparent; }
  /* line 12, scss/partials/_header.scss */
  .page-template-template-main .kahawa-header-content, .page-template-template-subpage .kahawa-header-content, .page-template-wydarzenie-archive .kahawa-header-content, .page-template-default .kahawa-header-content, .product-template-default .kahawa-header-content, .archive .kahawa-header-content {
    min-height: 50px;
    position: relative; }
    /* line 15, scss/partials/_header.scss */
    .page-template-template-main .kahawa-header-content .site-branding, .page-template-template-subpage .kahawa-header-content .site-branding, .page-template-wydarzenie-archive .kahawa-header-content .site-branding, .page-template-default .kahawa-header-content .site-branding, .product-template-default .kahawa-header-content .site-branding, .archive .kahawa-header-content .site-branding {
      position: absolute;
      left: 0;
      top: 0;
      padding-left: 1rem;
      max-width: 150px; }
    /* line 22, scss/partials/_header.scss */
    .page-template-template-main .kahawa-header-content .storefront-primary-navigation, .page-template-template-subpage .kahawa-header-content .storefront-primary-navigation, .page-template-wydarzenie-archive .kahawa-header-content .storefront-primary-navigation, .page-template-default .kahawa-header-content .storefront-primary-navigation, .product-template-default .kahawa-header-content .storefront-primary-navigation, .archive .kahawa-header-content .storefront-primary-navigation {
      position: absolute;
      top: 0;
      right: 0;
      width: 100%;
      padding: 0 0 0 230px;
      margin: 0;
      clear: none; }
      /* line 30, scss/partials/_header.scss */
      .page-template-template-main .kahawa-header-content .storefront-primary-navigation .main-navigation, .page-template-template-subpage .kahawa-header-content .storefront-primary-navigation .main-navigation, .page-template-wydarzenie-archive .kahawa-header-content .storefront-primary-navigation .main-navigation, .page-template-default .kahawa-header-content .storefront-primary-navigation .main-navigation, .product-template-default .kahawa-header-content .storefront-primary-navigation .main-navigation, .archive .kahawa-header-content .storefront-primary-navigation .main-navigation {
        width: 100%;
        margin: 0; }
      /* line 34, scss/partials/_header.scss */
      .page-template-template-main .kahawa-header-content .storefront-primary-navigation .menu, .page-template-template-subpage .kahawa-header-content .storefront-primary-navigation .menu, .page-template-wydarzenie-archive .kahawa-header-content .storefront-primary-navigation .menu, .page-template-default .kahawa-header-content .storefront-primary-navigation .menu, .product-template-default .kahawa-header-content .storefront-primary-navigation .menu, .archive .kahawa-header-content .storefront-primary-navigation .menu {
        float: right;
        padding-top: 5px; }
        /* line 37, scss/partials/_header.scss */
        .page-template-template-main .kahawa-header-content .storefront-primary-navigation .menu a, .page-template-template-subpage .kahawa-header-content .storefront-primary-navigation .menu a, .page-template-wydarzenie-archive .kahawa-header-content .storefront-primary-navigation .menu a, .page-template-default .kahawa-header-content .storefront-primary-navigation .menu a, .product-template-default .kahawa-header-content .storefront-primary-navigation .menu a, .archive .kahawa-header-content .storefront-primary-navigation .menu a {
          color: #fff; }
          /* line 39, scss/partials/_header.scss */
          .page-template-template-main .kahawa-header-content .storefront-primary-navigation .menu a:hover, .page-template-template-subpage .kahawa-header-content .storefront-primary-navigation .menu a:hover, .page-template-wydarzenie-archive .kahawa-header-content .storefront-primary-navigation .menu a:hover, .page-template-default .kahawa-header-content .storefront-primary-navigation .menu a:hover, .product-template-default .kahawa-header-content .storefront-primary-navigation .menu a:hover, .archive .kahawa-header-content .storefront-primary-navigation .menu a:hover {
            background-color: rgba(223, 211, 173, 0.8);
            color: #000; }
        /* line 44, scss/partials/_header.scss */
        .page-template-template-main .kahawa-header-content .storefront-primary-navigation .menu > li:last-child, .page-template-template-subpage .kahawa-header-content .storefront-primary-navigation .menu > li:last-child, .page-template-wydarzenie-archive .kahawa-header-content .storefront-primary-navigation .menu > li:last-child, .page-template-default .kahawa-header-content .storefront-primary-navigation .menu > li:last-child, .product-template-default .kahawa-header-content .storefront-primary-navigation .menu > li:last-child, .archive .kahawa-header-content .storefront-primary-navigation .menu > li:last-child {
          margin-right: -1.61803rem; }

/* line 52, scss/partials/_header.scss */
.kahawa-header-cart {
  position: absolute;
  right: 0;
  top: 0; }

/* line 58, scss/partials/_header.scss */
.page-template-template-main .kahawa-header-cart, .page-template-template-subpage .kahawa-header-cart, .page-template-wydarzenie-archive .kahawa-header-cart {
  display: none; }

/* line 64, scss/partials/_header.scss */
.page-template-template-subpage .site-header, .page-template-wydarzenie-archive .site-header, .archive .site-header, .page-template-default .site-header, .product-template-default .site-header {
  padding: 2.61803rem 0;
  background-position: center center; }

/* line 71, scss/partials/_header.scss */
.archive .main-navigation, .page-template-default .main-navigation, .product-template-default .main-navigation {
  padding-right: 11.09017rem; }

/* line 75, scss/partials/_header.scss */
.archive .kahawa-header-cart > li, .page-template-default .kahawa-header-cart > li, .product-template-default .kahawa-header-cart > li {
  display: inline-block; }
  /* line 77, scss/partials/_header.scss */
  .archive .kahawa-header-cart > li a, .page-template-default .kahawa-header-cart > li a, .product-template-default .kahawa-header-cart > li a {
    display: block;
    position: relative; }
    /* line 80, scss/partials/_header.scss */
    .archive .kahawa-header-cart > li a span, .page-template-default .kahawa-header-cart > li a span, .product-template-default .kahawa-header-cart > li a span {
      color: black;
      background-color: white;
      position: absolute;
      top: -2px;
      right: 2px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      padding: 3px 5px;
      line-height: 1;
      font-size: 14px;
      font-weight: 700; }

@media (min-width: 768px) {
  /* line 99, scss/partials/_header.scss */
  .site-header {
    border-bottom: none; } }

/* line 104, scss/partials/_header.scss */
.site-header .storefront-primary-navigation .menu {
  font-size: 0; }
  /* line 106, scss/partials/_header.scss */
  .site-header .storefront-primary-navigation .menu a {
    font-size: 1rem;
    text-transform: uppercase; }
    @media (min-width: 768px) {
      /* line 106, scss/partials/_header.scss */
      .site-header .storefront-primary-navigation .menu a {
        padding: 0.61803rem 1rem; } }
  @media (min-width: 768px) {
    /* line 114, scss/partials/_header.scss */
    .site-header .storefront-primary-navigation .menu .menu-item a {
      padding: 0.61803rem 1.61803rem; } }

/* line 125, scss/partials/_header.scss */
.site-header .storefront-primary-navigation .site-header-cart:hover > li > a {
  color: #000; }

/* line 132, scss/partials/_header.scss */
.site-header .storefront-primary-navigation .site-header-cart > li > a:hover {
  color: #838383; }

/* line 139, scss/partials/_header.scss */
.site-header .secondary-navigation {
  position: relative; }
  /* line 141, scss/partials/_header.scss */
  .site-header .secondary-navigation .cart-button {
    position: absolute;
    top: 0;
    right: 0;
    background-color: black;
    color: white;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    padding-top: 3px;
    padding-left: 7px; }

/**** styles for footer ****/
/* line 3, scss/partials/_footer.scss */
.site-footer {
  background-color: #dfd3ad; }
  /* line 5, scss/partials/_footer.scss */
  .site-footer .map-widget {
    height: 350px; }
  /* line 9, scss/partials/_footer.scss */
  .site-footer .kahawa-footer-widget h5 {
    font-weight: 700; }
  /* line 13, scss/partials/_footer.scss */
  .site-footer .kahawa-footer-widget a:hover {
    color: #CD853F; }
  /* line 17, scss/partials/_footer.scss */
  .site-footer .kahawa-footer-widget .fa {
    font-size: 1.61803rem;
    margin-right: 1rem; }

/**** styles for page content ****/
/* line 5, scss/partials/_content.scss */
.col-full.homepage-content {
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0; }
  /* line 10, scss/partials/_content.scss */
  .col-full.homepage-content .content-area {
    width: 100%;
    float: none;
    padding: 0;
    margin: 0; }

/* line 19, scss/partials/_content.scss */
.content-area .hero {
  width: 100%;
  height: 100vh;
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
  position: relative; }
  /* line 26, scss/partials/_content.scss */
  .content-area .hero::after {
    width: 100%;
    height: 100%;
    background-color: rgba(53, 39, 26, 0.2);
    display: block;
    content: ""; }

/* line 34, scss/partials/_content.scss */
.content-area .kahawa-intro {
  text-align: center;
  width: 100%;
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translateX(-50%) translateY(-50%);
          transform: translateX(-50%) translateY(-50%); }
  /* line 41, scss/partials/_content.scss */
  .content-area .kahawa-intro .kahawa-title {
    margin-bottom: 20px; }
    /* line 43, scss/partials/_content.scss */
    .content-area .kahawa-intro .kahawa-title img {
      max-width: 580px;
      margin: auto; }
  /* line 48, scss/partials/_content.scss */
  .content-area .kahawa-intro .kahawa-subtitle {
    text-transform: uppercase;
    font-size: 1.61803rem;
    color: #fff;
    max-width: 46.97872rem;
    margin: 0 auto 2.61803rem auto; }

/* line 56, scss/partials/_content.scss */
.content-area .kahawa-content {
  padding-top: 4rem; }

/* line 64, scss/partials/_content.scss */
.single-wydarzenie .site-content .content-area {
  width: 100%;
  float: none;
  margin-right: 0; }

/**** styles for single product ****/
/* line 5, scss/partials/_product.scss */
.products .product img {
  border-radius: 100%; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
